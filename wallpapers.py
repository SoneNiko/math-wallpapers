import os
import glob
import subprocess
from tqdm import tqdm
import yaml

results_dir = "results"

def cleanup_latexmk_byproducts(base_filename):
    """
    Removes all byproducts generated by latexmk for a given base filename,
    except for .tex and .pdf files.

    Args:
        base_filename (str): The filename without extension (e.g., 'document' for 'document.tex').
    """
    # List of extensions to keep
    keep_exts = {}
    # Find all files matching the base filename with any extension
    pattern = f"{base_filename}.*"
    for filepath in glob.glob(pattern):
        _, ext = os.path.splitext(filepath)
        if ext not in keep_exts:
            try:
                os.unlink(filepath)
            except Exception as e:
                print(f"Could not remove {filepath}: {e}")

def generate_pdf_from_tex(tex_path):
    """
    Generates a PDF from the given .tex file using latexmk.

    Args:
        tex_path (str): The path to the .tex file.
    """
    try:
        subprocess.run(['latexmk', '-pdf', tex_path], check=True, stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL)
    except subprocess.CalledProcessError as e:
        print(f"Failed to generate PDF for {tex_path}: {e}")


def convert_pdf_to_png(pdf_name_without_extension):
    """
    Use magick to convert the pdf into a png

    Args:
        pdf_name_without_extension (str): the name of the pdf file without its file extension. for "test.pdf" it would be test
    """
    try:
        subprocess.run(
            ["convert", "-density", "1000", f"{pdf_name_without_extension}.pdf", "-quality", "100", f"{pdf_name_without_extension}.png"],
            check=True,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL
        )
    except subprocess.CalledProcessError as e:
        print(f"Failed to generate png from pdf for {pdf_name_without_extension}: {e}")
        

def generate_singular_wallpaper(path_to_tex_file):
    global results_dir
    """
    Generates a singular wallpaper

    Args:
        wallpaper_tex_file (str): the name of the wallpaper to generate
    """
    if not os.path.isfile(path_to_tex_file):
        raise FileNotFoundError(f"The file '{path_to_tex_file}' does not exist.")    

    generate_pdf_from_tex(path_to_tex_file)
    base_filename = os.path.splitext(os.path.basename(path_to_tex_file))[0]
    convert_pdf_to_png(base_filename)

    # Move PNG to results, preserving subdirectory structure (excluding "tex")
    rel_path = os.path.relpath(path_to_tex_file, "tex")
    rel_dir = os.path.dirname(rel_path)
    dest_dir = os.path.join(results_dir, rel_dir)
    os.makedirs(dest_dir, exist_ok=True)
    png_filename = f"{base_filename}.png"
    dest_path = os.path.join(dest_dir, os.path.basename(png_filename))
    if os.path.exists(png_filename):
        os.replace(png_filename, dest_path)
    else:
        print(f"PNG file {png_filename} does not exist and cannot be moved.")

    cleanup_latexmk_byproducts(base_filename)

    
def generate_list_of_wallpapers():
    print(glob.glob("**/*.tex", recursive=True))
    return glob.glob("**/*.tex", recursive=True)


def main():
    if os.path.isdir(results_dir):
        if len(os.listdir(results_dir)) > 0:
            if os.isatty(0):
                response = input(f"The '{results_dir}' folder is not empty. Do you want to clear it? [Y/n/q]: ").strip().lower()
                if response in ("y", ""):
                    for f in os.listdir(results_dir):
                        try:
                            os.remove(os.path.join(results_dir, f))
                        except Exception as e:
                            print(f"Could not remove {f}: {e}")
                elif response == "q":
                    print("Quitting as requested.")
                    exit(0)
            else:
                for f in os.listdir(results_dir):
                    try:
                        os.remove(os.path.join(results_dir, f))
                    except Exception as e:
                        print(f"Could not remove {f}: {e}")

    for wallpaper in tqdm(generate_list_of_wallpapers(), desc="Generating wallpapers", unit="file"):
        generate_singular_wallpaper(wallpaper)


if __name__ == '__main__':
    # generate_pdf_from_tex("tex/theoretical_compsci/lambda_calculus/y-combinator-proof.tex")
    main()
    # def create_folders_from_yaml(yaml_path, base_dir):
    #     with open(yaml_path, 'r') as f:
    #         structure = yaml.safe_load(f)

    #     def create_structure(d, current_path):
    #         for key, value in d.items():
    #             new_path = os.path.join(current_path, key)
    #             os.makedirs(new_path, exist_ok=True)
    #             if isinstance(value, dict):
    #                 create_structure(value, new_path)

    #     create_structure(structure, base_dir)

    # Example usage:
    # Assumes 'folders.yml' is in the same directory as this script
    # create_folders_from_yaml('folders.yml', 'tex')





# generate_pdf_from_tex(os.path.join("some", "path", "to", "a", "file", "test.tex"))
# time.sleep(2)
# cleanup_latexmk_byproducts(base_filename="test")


